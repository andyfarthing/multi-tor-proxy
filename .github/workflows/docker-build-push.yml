name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for version bump commit
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for proper version handling

      # Create version file if it doesn't exist
      - name: Ensure version file exists
        run: |
          if [ ! -f VERSION ]; then
            echo "1.0.0" > VERSION
          fi

      # Increment version based on input or default to minor for push to main
      - name: Bump version
        id: bump_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE=${{ github.event.inputs.bump_type }}
          elif [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="none"
          fi

          if [ "$BUMP_TYPE" != "none" ]; then
            # Get current version
            CURRENT_VERSION=$(cat VERSION)

            # Split into major, minor, patch
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

            # Increment based on bump type
            if [ "$BUMP_TYPE" == "major" ]; then
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
            elif [ "$BUMP_TYPE" == "minor" ]; then
              MINOR=$((MINOR+1))
              PATCH=0
            else
              PATCH=$((PATCH+1))
            fi

            # Create new version
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo $NEW_VERSION > VERSION

            # Set up git
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"

            # Commit and push if we're on main
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              git add VERSION
              git commit -m "Bump version to $NEW_VERSION [skip ci]"
              git push
            fi
          else
            NEW_VERSION=$(cat VERSION)
          fi

          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Set up BuildKit Docker container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      # Build and push Docker image with Buildx
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Optional: Scan for vulnerabilities
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        # Only run this step when the image was actually pushed
        if: ${{ github.event_name != 'pull_request' }}
        # Continue on error so the workflow doesn't fail due to vulnerabilities
        continue-on-error: true
